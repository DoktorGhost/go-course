/*
2. Отсортируйте студентов по их K-му баллу.
Дана класс с m студентами и n экзаменами. Вам дана матрица целых чисел 0-индексированных m x n, где каждая строка представляет одного студента, а score [i] [j] обозначает балл, который i-тый студент получил на j-том экзамене. Матрица оценок содержит только уникальные целые числа.

Вам также дано целое число k. Отсортируйте студентов (т. e. Строки матрицы) по их баллам в k-ом (0-индексированном) экзамене от высшего к низшему.

Верните матрицу после сортировки.

Пример 1:

Input: score = [[10,6,9,1],[7,5,11,2],[4,8,3,15]], k = 2

Output: [[7,5,11,2],[10,6,9,1],[4,8,3,15]]

Объяснение: На диаграмме выше S обозначает студента, а E - экзамен.

- Студент с индексом 1 получил 11 баллов в экзамене 2, что является самым высоким результатом, поэтому он занял первое место.

- Студент с индексом 0 получил 9 баллов в экзамене 2, что является вторым по высоте результатом, поэтому он занял второе место.

- Студент с индексом 2 получил 3 балла в экзамене 2, что является самым низким результатом, поэтому он занял третье место.

Пример 2:

Input: score = [[3,4],[5,6]], k = 0

Output: [[5,6],[3,4]]

Объяснение: На диаграмме выше S обозначает студента, а E - экзамен.

- Студент с индексом 1 получил 5 баллов в экзамене 0, что является самым высоким результатом, поэтому он занял первое место.

- Студент с индексом 0 получил 3 балла в экзамене 0, что является самым низким результатом, поэтому он занял второе место.

Constraints:

m == score.length
n == score[i].length
1 <= m, n <= 250
1 <= score[i][j] <= 105
score consists of distinct integers.
0 <= k < n
https://leetcode.com/problems/sort-the-students-by-their-kth-score/
*/

package main

import "sort"

func sortTheStudents(score [][]int, k int) [][]int {
	maps := make(map[int][]int)
	var keysArray []int
	var result [][]int

	for _, scor := range score {
		maps[scor[k]] = scor
		keysArray = append(keysArray, scor[k])
	}

	sort.Slice(keysArray, func(i, j int) bool {
		return keysArray[i] > keysArray[j]
	})
	for _, i := range keysArray {
		result = append(result, maps[i])
	}

	return result
}
